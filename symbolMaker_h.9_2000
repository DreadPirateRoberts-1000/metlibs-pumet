
#ifndef _symbolMaker_h
#define _symbolMaker_h

#include <miSymbol.h>
#include <miString.h>
#include <miTime.h>
#include <vector>
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <algo.h>
#include <math.h>
#include <paramet.h>
#include <puMathAlgo.h>
#include <map>

// this program is used to compute weather symbols from 
// cloud, precip and temperature data.
// The symbols er created by a file, which can be edited.
// It is possible to change the customer numbers, or the language
// of the used text. The standart file is:
// /work/pu/input/weatherSymbols.nor
// the program checks dynamically the 6 hours before and after
// the requested termin for data. 
// Because of that it is compatible with ECMWF 6-hours prognosis
// as well as HIRLAM 3-hours forecasts.
// JS/PU 7-98
// last modified 9-98 added vis output
// and the pos. to get a symbol by customNumber


// initializes by construction the ident numbers of the
// requested parameters, sorts the model input and does the job

using namespace std;

class symbolMaker{
  friend class cloudGrp;
private:
  int MAXcustom, MINcustom;

  miSymbol symbol; //  rawdata ...
  paramet t2m ;    // temperature in 2 m
  paramet rrf ;    // frontal precip. RR6h, average (t-6h, t+6h)
  paramet rrk ;    // convect. precip.        - " -
  paramet rrt ;    // total precip.           - " -
  paramet cs  ;    // cloud amount %  surface level (1000 hPa)
  paramet cl  ;    //     - " -       low level     (850  hPa)
  paramet cm  ;    //     - " -       middel level  (500  hPa)
  paramet ch  ;    //     - " -       high  level   (300  hPa)
  paramet ct  ;    //     - " -       total
  paramet rrtotal; //  averaged data ...
  paramet csurf;
  paramet clow;
  paramet cmiddle;
  paramet cheight;
  paramet ctotal;
  paramet lli;      // lightning index ( 0 / 1 )
  paramet agr;      // aggregation (0 = water;1 = sleet;2 = snow)    
  paramet periodOfRain;
  paramet periodOfNoRain;


  static miSymbol sun;                           
  static miSymbol lightCloud;                      
  static miSymbol partlyCloud;                     
  static miSymbol cloud;
  static miSymbol fog;
  static miSymbol lightRainSun;
  static miSymbol lightRain;
  static miSymbol rain;
  static miSymbol sleetSun;
  static miSymbol snowSun;
  static miSymbol sleet;
  static miSymbol snow;
  static miSymbol lightRainThunderSun;
  static miSymbol RainThunder;
  static miSymbol SnowThunder;
  static miSymbol error;
public:
  symbolMaker()
    : t2m(31),
      rrf(19), 
      rrk(20),
      rrt(17),
      cs(3901),
      cl(3902),
      cm(3903),
      ch(3904),
      ct(25),
      rrtotal(17),
      csurf(3901),
      clow(3902),
      cmiddle(3903),
      cheight(3904),
      ctotal(25),
      agr(170),
      lli(661) {}
  
  bool initializeModel(vector<paramet>);
  void readSymbols(miString);
  void periods(vector<miTime>,int,int );

  vector<miSymbol> compute(vector<paramet>, vector<miTime>,int,int);
  vector<miSymbol> compute_new(vector<paramet>, vector<miTime>,int,int);
  vector<float>    water_state(vector<float>);


  bool cloudMaker(miTime);
  bool rainMaker(miTime);
  bool tempMaker(miTime);
  bool stateMaker(miTime);
  bool lightningMaker(miTime);


  bool signChange(int, int);
  miSymbol getSymbol(int );

  bool isShower(int);
  bool isPrecip(int);
  bool isDry(int);
  
  int maxCustom() const { return MAXcustom;}
  int minCustom() const { return MINcustom;}
  void make_pos_symbols(map<int,int>&, map<int,miString>& );
};

#endif


